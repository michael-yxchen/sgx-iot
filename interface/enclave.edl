/*
 * Copyright (C) 2019 Intel Corporation
 *
 * SPDX-License-Identifier: BSD-3-Clause
 */

enclave
{
	include "sgx_quote.h"

    trusted
    {
        public sgx_status_t ecall_key_gen_and_seal(
            [out, size=pubkey_size] char *pubkey,
            size_t pubkey_size,
            [out, size=sealedprivkey_size] char *sealedprivkey,
            size_t sealedprivkey_size);

        public sgx_status_t ecall_key_gen_and_seal_all(
            [out, size=sealedpubkey_size] char *sealedpubkey,
            size_t sealedpubkey_size,
            [out, size=sealedprivkey_size] char *sealedprivkey,
            size_t sealedprivkey_size);

        public sgx_status_t ecall_calc_buffer_sizes(
            [out] size_t* epubkey_size,
            [out] size_t* esealedpubkey_size,
            [out] size_t* esealedprivkey_size,
            [out] size_t* esignature_size,
            [out] size_t* esealedsignature_size);

        public sgx_status_t ecall_unseal_and_sign(
            [in, size=msg_size] uint8_t * msg,
            uint32_t msg_size,
            [in, size=sealed_size]char *sealed,
            size_t sealed_size,
            [out, size=signature_size] char* signature,
            size_t signature_size);
        
        public sgx_status_t ecall_unseal_and_quote(
            [out] sgx_report_t *report,
            [in] sgx_target_info_t *target_info,
            [in, size=sealed_size]char *sealed,
            size_t sealed_size,
            [out, size=public_key_size] char *public_key,
            size_t public_key_size);

		public sgx_status_t ecall_report_gen(
            [out] sgx_report_t *report,
            [in] sgx_target_info_t *target_info,
            sgx_report_data_t report_data);
        
        public sgx_status_t ecall_seal_signature(
            [out, size=sealed_signature_size] char *sealed_signature,
            size_t sealed_signature_size, 
            [in, size=signature_size] char *signature,
            size_t signature_size);
            
        public sgx_status_t ecall_unseal_and_verify(
            [in, size=msg_size]uint8_t *msg, 
            uint32_t msg_size,
            [in, size=pubkey_size] char *pubkey, 
            size_t pubkey_size,
            [in, size=signature_size]char *signature, 
            size_t signature_size,
            [out, size=1] uint8_t *result);
    };

    untrusted
    {
        void ocall_print_string([in, string] const char *str);
        //void ocall_print_int([in, int] const int num);
    };
};
